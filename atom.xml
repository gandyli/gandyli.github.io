<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>andyli的博客</title>
  
  <subtitle>做最好的自己</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.gandyli.xyz/"/>
  <updated>2018-12-22T04:00:13.453Z</updated>
  <id>https://www.gandyli.xyz/</id>
  
  <author>
    <name>andyli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>题解 P4470 【[BJWC2018]售票】</title>
    <link href="https://www.gandyli.xyz/%E9%A2%98%E8%A7%A3/%E9%A2%98%E8%A7%A3-P4470-%E3%80%90-BJWC2018-%E5%94%AE%E7%A5%A8%E3%80%91/"/>
    <id>https://www.gandyli.xyz/题解/题解-P4470-【-BJWC2018-售票】/</id>
    <published>2018-12-22T03:59:34.000Z</published>
    <updated>2018-12-22T04:00:13.453Z</updated>
    
    <content type="html"><![CDATA[<p>这是一道字符串的模拟题。我们可以利用<code>C++</code>的<code>string</code>来简化我们的代码。其实存储屏幕上的字母只需要用一维数组，然后在输出的时候处理一下。</p><p>把所有的都输入完以后，检查哪个目的地字符串的前缀是当前打进去的字符，然后把这个目的地前缀的后一个字符填充到屏幕里面。思路非常简单。</p><p>代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">55</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> A[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; A[i];</span><br><span class="line"><span class="built_in">string</span> read;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; read;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">screen</span><span class="params">(<span class="number">32</span>, <span class="string">'*'</span>)</span></span>;</span><br><span class="line"><span class="keyword">size_t</span> readlen = read.length();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">if</span> (A[i].substr(<span class="number">0</span>, readlen) == read &amp;&amp; A[i].length() &gt; readlen) <span class="comment">// 注意这个目的地的长度必须大于读入的前缀</span></span><br><span class="line">screen[A[i][readlen] - <span class="string">'A'</span> + <span class="number">3</span>] = A[i][readlen];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; screen.length(); i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span>.put(screen[i]);</span><br><span class="line">    <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">8</span> == <span class="number">0</span> &amp;&amp; i)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是一道字符串的模拟题。我们可以利用&lt;code&gt;C++&lt;/code&gt;的&lt;code&gt;string&lt;/code&gt;来简化我们的代码。其实存储屏幕上的字母只需要用一维数组，然后在输出的时候处理一下。&lt;/p&gt;
&lt;p&gt;把所有的都输入完以后，检查哪个目的地字符串的前缀是当前打进去的字符，
      
    
    </summary>
    
      <category term="题解" scheme="https://www.gandyli.xyz/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://www.gandyli.xyz/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="BJWC" scheme="https://www.gandyli.xyz/tags/BJWC/"/>
    
      <category term="2018" scheme="https://www.gandyli.xyz/tags/2018/"/>
    
  </entry>
  
  <entry>
    <title>题解 UVA1146 【Now or later】</title>
    <link href="https://www.gandyli.xyz/%E9%A2%98%E8%A7%A3/%E9%A2%98%E8%A7%A3-UVA1146-%E3%80%90Now-or-later%E3%80%91/"/>
    <id>https://www.gandyli.xyz/题解/题解-UVA1146-【Now-or-later】/</id>
    <published>2018-12-22T03:56:09.000Z</published>
    <updated>2018-12-22T03:58:31.474Z</updated>
    
    <content type="html"><![CDATA[<p>“最小值尽量大”的典型处理方法是二分查找最终答案$P$。这样，原来的问题转化为了判定问题“是否存在一个调度方案，使得相邻两个着陆时间差总是不小于$P$”，而这个问题可以进一步转化为：任意两个着陆时间差总是不小于$P$。令bool变量$x_i$表示第$i$架飞机是否早着陆，则唯一的限制就是“时间差小于$P$的两个着陆时间不能同时满足”。例如，若$E_i$和$L_i$的时间差小于$P$，则不能同时满足$x_i=true$和$x_j=false$。每一组不能同时满足的着陆时间对应于一个子句，则整个约束条件对应于一个$2-SAT$问题的实例，包含$n$个变量和不超过$n(n-1)/2$个子句。</p><p>考虑到还要在所有$O(n^2)$种可能的答案中二分查找，总时间复杂度为$O(n^2\log n)$。考虑到时间的范围比较大，也可以直接二分时间的数值，时间复杂度为$O(n^2\log T)$，其中$T$为所有时间的最大值。</p><p>代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">20005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoSAT</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">bool</span> mark[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> S[maxn &lt;&lt; <span class="number">1</span>], c;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (mark[x ^ <span class="number">1</span>])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (mark[x])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">mark[x] = <span class="literal">true</span>;</span><br><span class="line">S[c++] = x;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; G[x].size(); i++)</span><br><span class="line"><span class="keyword">if</span> (!dfs(G[x][i]))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_clause</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> xval, <span class="keyword">int</span> y, <span class="keyword">int</span> yval)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">1</span>) + xval;</span><br><span class="line">y = (y &lt;&lt; <span class="number">1</span>) + yval;</span><br><span class="line">G[x ^ <span class="number">1</span>].push_back(y);</span><br><span class="line">G[y ^ <span class="number">1</span>].push_back(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (n &lt;&lt; <span class="number">1</span>); i += <span class="number">2</span>)</span><br><span class="line"><span class="keyword">if</span> (!mark[i] &amp;&amp; !mark[i + <span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> (c = <span class="number">0</span>; !dfs(i))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (c &gt; <span class="number">0</span>)</span><br><span class="line">mark[S[--c]] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (!dfs(i + <span class="number">1</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;n = n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (n &lt;&lt; <span class="number">1</span>); i++)</span><br><span class="line">G[i].clear();</span><br><span class="line"><span class="built_in">memset</span>(mark, <span class="number">0</span>, <span class="keyword">sizeof</span>(mark));</span><br><span class="line">&#125;</span><br><span class="line">&#125; solver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T[maxn][<span class="number">2</span>], n;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> diff)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">solver.init(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; <span class="number">2</span>; a++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt; <span class="number">2</span>; b++)</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>(T[i][a] - T[j][b]) &lt; diff)</span><br><span class="line">solver.add_clause(i, a ^ <span class="number">1</span>, j, b ^ <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> solver.solve();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> L = <span class="number">0</span>, R = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; <span class="number">2</span>; a++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T[i][a]), R = max(R, T[i][a]);</span><br><span class="line"><span class="keyword">while</span> (L &lt; R)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> M = L + ((R - L + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (check(M))</span><br><span class="line">L = M;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">R = M - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, L);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;“最小值尽量大”的典型处理方法是二分查找最终答案$P$。这样，原来的问题转化为了判定问题“是否存在一个调度方案，使得相邻两个着陆时间差总是不小于$P$”，而这个问题可以进一步转化为：任意两个着陆时间差总是不小于$P$。令bool变量$x_i$表示第$i$架飞机是否早着陆，则
      
    
    </summary>
    
      <category term="题解" scheme="https://www.gandyli.xyz/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://www.gandyli.xyz/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="UVa" scheme="https://www.gandyli.xyz/tags/UVa/"/>
    
  </entry>
  
</feed>
