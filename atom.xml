<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>andyli的博客</title>
  
  <subtitle>做最好的自己</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://gandyli.xyz/"/>
  <updated>2019-01-13T04:32:45.431Z</updated>
  <id>https://gandyli.xyz/</id>
  
  <author>
    <name>andyli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Test</title>
    <link href="https://gandyli.xyz/archives/Test/"/>
    <id>https://gandyli.xyz/archives/Test/</id>
    <published>2019-01-04T14:56:15.000Z</published>
    <updated>2019-01-13T04:32:45.431Z</updated>
    
    <content type="html"><![CDATA[<script src=/js/crypto-js.js></script><script>function doDecrypt (pwd, onError) {console.log('in doDecrypt');const txt = document.getElementById('enc_content').innerHTML;let plantext;try {const bytes = CryptoJS.AES.decrypt(txt, pwd);var plaintext = bytes.toString(CryptoJS.enc.Utf8);} catch(err) {if(onError) {onError(err);}return;}document.getElementById('enc_content').innerHTML = plaintext;document.getElementById('enc_content').style.display = 'block';document.getElementById('enc_passwd').style.display = 'none';if(typeof MathJax !== 'undefined') {MathJax.Hub.Queue(['resetEquationNumbers', MathJax.InputJax.TeX],['PreProcess', MathJax.Hub],['Reprocess', MathJax.Hub]);}}</script><div id="enc_content" style="display:none">U2FsdGVkX1+V0bbhMh/pI+gj3cOnvBcqKu1mc0uaY1V2VK2+u0wtpVvJ8bpyNl2shJ2xPZotjl9/tZy0Qq8eCtgnHbGUCgbcff6gM5loe4he5MBiOvR3Y4fmTWHHSt3OcBZcK9rdpw2HI9Sf8D47l3hjvEgqoLwJ8VsHP/ldrQGQqiQnLGwcKsh/u6HImanSrQ5PN//pNP4n9BLHAwUB6m9fB+Swmv6SQx9p9nUo1wo/eEOg6nbs1otro77XSwkw</div><div id="enc_passwd"> <input id="enc_pwd_input" type="password" style="border-radius: 5px;border-style: groove;height: 30px;width: 50%;cursor: auto;font-size: 102%;color: currentColor;outline: none;text-overflow: initial;padding-left: 5px;" onkeydown="if (event.keyCode == 13) { decrypt(); return false;}"> <input type="submit" value="解&nbsp;密" onclick="decrypt()" style="width: 58px;height: 34px;border-radius: 5px;background-color: white;border-style: solid;color: currentColor;"><div id="enc_error" style="display: inline-block;color: #d84527;margin-left: 10px"></div><script>var onError = function(error) {document.getElementById("enc_error").innerHTML = "密码错误"};function decrypt() {var passwd = document.getElementById("enc_pwd_input").value;console.log(passwd);doDecrypt(passwd, onError);}</script></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=/js/crypto-js.js&gt;&lt;/script&gt;
&lt;script&gt;
function doDecrypt (pwd, onError) {
	console.log(&#39;in doDecrypt&#39;);
	const txt = document.getE
      
    
    </summary>
    
      <category term="Test" scheme="https://gandyli.xyz/categories/Test/"/>
    
    
      <category term="Test" scheme="https://gandyli.xyz/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>题解 UVA1339 【Ancient Cipher】</title>
    <link href="https://gandyli.xyz/archives/%E9%A2%98%E8%A7%A3-UVA1339-%E3%80%90Ancient-Cipher%E3%80%91/"/>
    <id>https://gandyli.xyz/archives/题解-UVA1339-【Ancient-Cipher】/</id>
    <published>2018-12-22T06:33:06.000Z</published>
    <updated>2018-12-26T13:24:28.219Z</updated>
    
    <content type="html"><![CDATA[<p>直接统计字符个数，排序后比较各个字母出现的数量。<br>代码如下：<a id="more"></a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt1[maxn], cnt2[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s1, s2;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(cnt1, <span class="number">0</span>, <span class="keyword">sizeof</span>(cnt1));</span><br><span class="line"><span class="built_in">memset</span>(cnt2, <span class="number">0</span>, <span class="keyword">sizeof</span>(cnt2));</span><br><span class="line"><span class="keyword">size_t</span> len = s1.length();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">cnt1[s1[i] - <span class="string">'A'</span>]++;</span><br><span class="line">cnt2[s2[i] - <span class="string">'A'</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">sort(cnt1, cnt1 + <span class="number">26</span>);</span><br><span class="line">sort(cnt2, cnt2 + <span class="number">26</span>);</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt1[i] != cnt2[i])</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"NO "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">//代码仅供参考，请各位自行编写代码，严禁抄袭</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;直接统计字符个数，排序后比较各个字母出现的数量。&lt;br&gt;代码如下：
    
    </summary>
    
      <category term="题解" scheme="https://gandyli.xyz/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://gandyli.xyz/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="UVa" scheme="https://gandyli.xyz/tags/UVa/"/>
    
  </entry>
  
  <entry>
    <title>题解 UVA400 【Unix ls】</title>
    <link href="https://gandyli.xyz/archives/%E9%A2%98%E8%A7%A3-UVA400-%E3%80%90Unix-ls%E3%80%91/"/>
    <id>https://gandyli.xyz/archives/题解-UVA400-【Unix-ls】/</id>
    <published>2018-12-22T06:31:56.000Z</published>
    <updated>2018-12-26T13:25:13.048Z</updated>
    
    <content type="html"><![CDATA[<p>这一题可以先算出$M$,行数和列数，然后逐行逐列输出。<br>代码如下：<a id="more"></a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxcol = <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> name[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; str, <span class="keyword">int</span> len, <span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - str.length(); i++)</span><br><span class="line"><span class="built_in">cout</span>.put(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; name[i];</span><br><span class="line">m = max(m, (<span class="keyword">int</span>)name[i].length());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> c = (maxcol - m) / (m + <span class="number">2</span>) + <span class="number">1</span>, </span><br><span class="line">            r = (n - <span class="number">1</span>) / c + <span class="number">1</span>;</span><br><span class="line">print(<span class="string">""</span>, <span class="number">60</span>, <span class="string">'-'</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">sort(name, name + n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; c; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = j * r + i;</span><br><span class="line"><span class="keyword">if</span> (tmp &lt; n) print(name[tmp], j == c - <span class="number">1</span> ? m : m + <span class="number">2</span>, <span class="string">' '</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这一题可以先算出$M$,行数和列数，然后逐行逐列输出。&lt;br&gt;代码如下：
    
    </summary>
    
      <category term="题解" scheme="https://gandyli.xyz/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://gandyli.xyz/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="UVa" scheme="https://gandyli.xyz/tags/UVa/"/>
    
  </entry>
  
  <entry>
    <title>题解 UVA10815 【Andy&#39;s First Dictionary】</title>
    <link href="https://gandyli.xyz/archives/%E9%A2%98%E8%A7%A3-UVA10815-%E3%80%90Andy-s-First-Dictionary%E3%80%91/"/>
    <id>https://gandyli.xyz/archives/题解-UVA10815-【Andy-s-First-Dictionary】/</id>
    <published>2018-12-22T06:26:49.000Z</published>
    <updated>2018-12-26T13:24:21.467Z</updated>
    
    <content type="html"><![CDATA[<p>本题没有太多的技巧，只是考验<code>STL</code>的用法，可以用<code>set</code>保存各个单词<del>，还可以用输出迭代器（<code>ostream_iterator</code>）来输出</del>。注意：输入时应把所有非字母的字符变成空格，然后利用<code>stringstream</code>得到各个单词。提示一下，<code>set</code>会自动排序，所以不用<code>sort</code>进行排序。代码如下（本人一贯偷懒，所以利用C++11来小小的简化了代码）：<a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; // 提供copy</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  // 提供cin, cout</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;  // 提供ostream_iterator</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;   // 提供stringstream</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;    // 提供string</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;    // 提供isalpha, tolower</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;       // 提供set</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; d;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s, tmp;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x : s) <span class="comment">// C++11</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isalpha</span>(x))</span><br><span class="line">x = <span class="built_in">tolower</span>(x);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">x = <span class="string">' '</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(s)</span></span>;</span><br><span class="line"><span class="keyword">while</span> (ss &gt;&gt; tmp)</span><br><span class="line">d.insert(tmp);</span><br><span class="line">&#125;</span><br><span class="line">ostream_iterator&lt;<span class="built_in">string</span>&gt; out(<span class="built_in">cout</span>, <span class="string">"\n"</span>);</span><br><span class="line">copy(d.begin(), d.end(), out);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本题没有太多的技巧，只是考验&lt;code&gt;STL&lt;/code&gt;的用法，可以用&lt;code&gt;set&lt;/code&gt;保存各个单词&lt;del&gt;，还可以用输出迭代器（&lt;code&gt;ostream_iterator&lt;/code&gt;）来输出&lt;/del&gt;。注意：输入时应把所有非字母的字符变成空格，然后利用&lt;code&gt;stringstream&lt;/code&gt;得到各个单词。提示一下，&lt;code&gt;set&lt;/code&gt;会自动排序，所以不用&lt;code&gt;sort&lt;/code&gt;进行排序。代码如下（本人一贯偷懒，所以利用C++11来小小的简化了代码）：
    
    </summary>
    
      <category term="题解" scheme="https://gandyli.xyz/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://gandyli.xyz/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="UVa" scheme="https://gandyli.xyz/tags/UVa/"/>
    
  </entry>
  
  <entry>
    <title>题解 UVA1641 【ASCII面积 ASCII Area】</title>
    <link href="https://gandyli.xyz/archives/%E9%A2%98%E8%A7%A3-UVA1641-%E3%80%90ASCII%E9%9D%A2%E7%A7%AF-ASCII-Area%E3%80%91/"/>
    <id>https://gandyli.xyz/archives/题解-UVA1641-【ASCII面积-ASCII-Area】/</id>
    <published>2018-12-22T06:25:23.000Z</published>
    <updated>2018-12-30T10:05:51.751Z</updated>
    
    <content type="html"><![CDATA[<p>这是一道和几何相关的题目（废话），不过不需要高深的几何知识。</p><p>每一个格子要么全白，要么全黑，要么半白半黑，只要能准确的判断出来即可。</p><p>字符<code>\</code>和<code>/</code>都是半白半黑，问题在于<code>.</code>到底是全白还是全黑。<a id="more"></a></p><p>解决方法是从上到下从左到右处理，沿途统计<code>/</code>和<code>\</code>。当这两个字符出现偶数次时说明接下来的格子在多边形外；奇数次则说明接下来的格子在多边形内。</p><p>可以用一个变量来判断是否在多边形外。<br>AC代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; c;</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">'/'</span> || c == <span class="string">'\\'</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans++;</span><br><span class="line">flag = !flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">'.'</span> &amp;&amp; flag)</span><br><span class="line">ans += <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans / <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一道和几何相关的题目（废话），不过不需要高深的几何知识。&lt;/p&gt;
&lt;p&gt;每一个格子要么全白，要么全黑，要么半白半黑，只要能准确的判断出来即可。&lt;/p&gt;
&lt;p&gt;字符&lt;code&gt;\&lt;/code&gt;和&lt;code&gt;/&lt;/code&gt;都是半白半黑，问题在于&lt;code&gt;.&lt;/code&gt;到底是全白还是全黑。
    
    </summary>
    
      <category term="题解" scheme="https://gandyli.xyz/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://gandyli.xyz/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="UVa" scheme="https://gandyli.xyz/tags/UVa/"/>
    
  </entry>
  
  <entry>
    <title>题解 Luogu P1379 【八数码难题】</title>
    <link href="https://gandyli.xyz/archives/%E9%A2%98%E8%A7%A3-Luogu-P1379-%E3%80%90%E5%85%AB%E6%95%B0%E7%A0%81%E9%9A%BE%E9%A2%98%E3%80%91/"/>
    <id>https://gandyli.xyz/archives/题解-Luogu-P1379-【八数码难题】/</id>
    <published>2018-12-22T06:25:23.000Z</published>
    <updated>2018-12-31T14:09:40.378Z</updated>
    
    <content type="html"><![CDATA[<p>八数码问题其实就是图上的最短路问题，图的“节点”就是$9$个格子中的滑块编号（从上到下，从左到右把它们放到一个包含$9$个元素的数组中）。无权图上的最短路问题可以用<code>BFS</code>求解。<a id="more"></a></p><hr><p>树的<code>BFS</code>不需要判重，因为根本不会重复；但对于图来说，如果不判重，时间和空间都将产生极大的浪费。 楼下的判重方式建议不要学习，因为用一个九维数组一共有$9^9=387420489$项，太多了，数组可能开不下。实际结点数并没有这么多，$0$~$8$的排列总共只有$9!=362880$个。这样的用法存在大量的浪费…——数组中有很多项都没有被用到，但却占据了空间。</p><hr><p>第一种办法是把排列变成整数，这样只开一个一维数组就可以了。（效率还行）。但是适用范围不大：如果隐式图的总结点数非常大，编码也会很大，数组还是开不下。</p><hr><p>第二种办法是使用哈希（<code>hash</code>）技术（简单地说，是把结点变成整数，但不必一一对应）。（比赛中最常用）</p><hr><p>第三种方法是利用<code>STL</code>集合。（代码最好写），但是效率比较慢，建议在时间紧迫或对效率要求不太高的情况下使用，或者仅把它作为“跳板”——先写一个<code>STL</code>的程序，确保主算法正确，然后把<code>set</code>替换成自己写的哈希表。</p><hr><p>这里利用第二种方法，因为比赛中比较常用，而且执行效率很高。代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> State = <span class="keyword">int</span>[<span class="number">9</span>]; <span class="comment">// 定义“状态”类型</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxstate = <span class="number">1000000</span>;</span><br><span class="line">State st[maxstate], goal = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>&#125;; <span class="comment">// 状态数组。所有状态都保存在这里</span></span><br><span class="line"><span class="keyword">int</span> dist[maxstate]; <span class="comment">// 距离数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> myhash <span class="comment">// STL有许多函数名是hash的函数，为了保险最好用名称空间（换个名字也可以），个人习惯</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> hashsize = <span class="number">1000003</span>;</span><br><span class="line">    <span class="keyword">int</span> head[hashsize], next[maxstate];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init_lookup_table</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(head, <span class="number">0</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hash</span><span class="params">(State&amp; s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> v = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 把9个数字组合成9位数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">            v = v * <span class="number">10</span> + s[i];</span><br><span class="line">        <span class="keyword">return</span> v % hashsize;</span><br><span class="line">        <span class="comment">// 确保hash值是不超过hash表的大小的非负整数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">try_to_insert</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h = hash(st[s]);</span><br><span class="line">        <span class="keyword">int</span> u = head[h]; <span class="comment">// 从表头开始查找链表</span></span><br><span class="line">        <span class="keyword">while</span> (u)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 找到了，插入失败</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">memcmp</span>(st[u], st[s], <span class="keyword">sizeof</span>(st[s])))</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            u = next[u]; <span class="comment">// 顺着链表接着找</span></span><br><span class="line">        &#125;</span><br><span class="line">        next[s] = head[h]; <span class="comment">// 插入到链表中</span></span><br><span class="line">        head[h] = s;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BFS，返回目标状态在st数组下标</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    myhash::init_lookup_table(); <span class="comment">// 初始化查找表</span></span><br><span class="line">    <span class="keyword">int</span> front = <span class="number">1</span>, rear = <span class="number">2</span>; <span class="comment">// 不使用下标0，因为0被看做“不存在”</span></span><br><span class="line">    <span class="keyword">while</span> (front &lt; rear)</span><br><span class="line">    &#123;</span><br><span class="line">        State&amp; s = st[front]; <span class="comment">// 用引用简化代码</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">memcmp</span>(goal, s, <span class="keyword">sizeof</span>(s)))</span><br><span class="line">            <span class="keyword">return</span> front; <span class="comment">// 找到目标状态，成功返回</span></span><br><span class="line">        <span class="keyword">int</span> z;</span><br><span class="line">        <span class="keyword">for</span> (z = <span class="number">0</span>; z &lt; <span class="number">9</span>; z++)</span><br><span class="line">            <span class="keyword">if</span> (!s[z])</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 找“0”的位置</span></span><br><span class="line">        <span class="comment">// 获取行列编号（0~2） </span></span><br><span class="line">        <span class="keyword">int</span> x = z / <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> y = z % <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">0</span>; d &lt; <span class="number">4</span>; d++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> newx = x + dx[d];</span><br><span class="line">            <span class="keyword">int</span> newy = y + dy[d];</span><br><span class="line">            <span class="keyword">int</span> newz = newx * <span class="number">3</span> + newy;</span><br><span class="line">            <span class="keyword">if</span> (newx &gt;= <span class="number">0</span> &amp;&amp; newx &lt; <span class="number">3</span> &amp;&amp; newy &gt;= <span class="number">0</span> &amp;&amp; newy &lt; <span class="number">3</span>)</span><br><span class="line">            &#123; <span class="comment">// 如果移动合法</span></span><br><span class="line">                State&amp; t = st[rear]; <span class="comment">// 扩展新结点</span></span><br><span class="line">                <span class="built_in">memcpy</span>(&amp;t, &amp;s, <span class="keyword">sizeof</span>(s));</span><br><span class="line">                t[newz] = s[z];</span><br><span class="line">                t[z] = s[newz];</span><br><span class="line">                <span class="comment">// 更新新结点的距离值</span></span><br><span class="line">                dist[rear] = dist[front] + <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// 如果成功插入查找表，修改队尾指针</span></span><br><span class="line">                <span class="keyword">if</span> (myhash::try_to_insert(rear))</span><br><span class="line">                    rear++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        front++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 失败</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> tmp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; tmp; <span class="comment">// 起始状态</span></span><br><span class="line">        st[<span class="number">1</span>][i] = tmp - <span class="string">'0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = bfs(); <span class="comment">// 返回目标状态的下标</span></span><br><span class="line">    <span class="keyword">if</span> (ans &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; dist[ans] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意：本代码用的是<code>C++11</code>新标准。</p><p>提示：某些特定的<code>STL</code>实现还有<code>hash_set</code>，它正是基于前面的哈希表，但它并不是标准<code>C++</code>的一部分，因此不是所有情况下都可用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;八数码问题其实就是图上的最短路问题，图的“节点”就是$9$个格子中的滑块编号（从上到下，从左到右把它们放到一个包含$9$个元素的数组中）。无权图上的最短路问题可以用&lt;code&gt;BFS&lt;/code&gt;求解。
    
    </summary>
    
      <category term="题解" scheme="https://gandyli.xyz/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://gandyli.xyz/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Luogu" scheme="https://gandyli.xyz/tags/Luogu/"/>
    
  </entry>
  
  <entry>
    <title>题解 UVA11462 【Age Sort】</title>
    <link href="https://gandyli.xyz/archives/%E9%A2%98%E8%A7%A3-UVA11462-%E3%80%90Age-Sort%E3%80%91/"/>
    <id>https://gandyli.xyz/archives/题解-UVA11462-【Age-Sort】/</id>
    <published>2018-12-22T06:23:53.000Z</published>
    <updated>2018-12-26T13:24:18.606Z</updated>
    
    <content type="html"><![CDATA[<p>由于数据量太大，这里不建议使用快排函数。这里可以利用整数范围很小这个条件来使用计数排序方法。下面是程序代码：<a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n, x, c[101];</span><br><span class="line">while (scanf(&quot;%d&quot;, &amp;n) == 1 &amp;&amp; n)</span><br><span class="line">&#123;</span><br><span class="line">memset(c, 0, sizeof(c));</span><br><span class="line">for (int i = 0; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">scanf(&quot;%d&quot;, &amp;x);</span><br><span class="line">c[x]++;</span><br><span class="line">&#125;</span><br><span class="line">int first = 1;</span><br><span class="line">for(int i = 1; i &lt;= 100; i++)</span><br><span class="line">for (int j = 0; j &lt; c[i]; j++)</span><br><span class="line">&#123;</span><br><span class="line">if (!first) printf(&quot; &quot;);</span><br><span class="line">first = 0;</span><br><span class="line">printf(&quot;%d&quot;, i);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果还要精益求精，可以优化输入输出，进一步降低运行时间。程序如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cctype&gt;</span><br><span class="line"></span><br><span class="line">inline int readint()</span><br><span class="line">&#123;</span><br><span class="line">char c = getchar();</span><br><span class="line">while (!isdigit(c))</span><br><span class="line">c = getchar();</span><br><span class="line"></span><br><span class="line">int x = 0;</span><br><span class="line">while (isdigit(c))</span><br><span class="line">&#123;</span><br><span class="line">x = x * 10 + c - &apos;0&apos;;</span><br><span class="line">c = getchar();</span><br><span class="line">&#125;</span><br><span class="line">return x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int buf[10]; // 声明成全局变量可以减小开销</span><br><span class="line">inline void writeint(int i)</span><br><span class="line">&#123;</span><br><span class="line">int p = 0;</span><br><span class="line">if (i == 0)</span><br><span class="line">p++; // 特殊情况：i等于0时需要输出0，而不是什么也不输出</span><br><span class="line">else </span><br><span class="line">while (i)</span><br><span class="line">&#123;</span><br><span class="line">buf[p++] = i % 10;</span><br><span class="line">i /= 10;</span><br><span class="line">&#125;</span><br><span class="line">for (int j = p - 1; j &gt;= 0; j--)</span><br><span class="line">putchar(&apos;0&apos; + buf[j]); // 逆序输出</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n, c[101];</span><br><span class="line">while (n = readint())</span><br><span class="line">&#123;</span><br><span class="line">memset(c, 0, sizeof(c));</span><br><span class="line">for (int i = 0; i &lt; n; i++)</span><br><span class="line">c[readint()]++;</span><br><span class="line">int first = 1;</span><br><span class="line">for (int i = 1; i &lt;= 100; i++)</span><br><span class="line">for (int j = 0; j &lt; c[i]; j++)</span><br><span class="line">&#123;</span><br><span class="line">if (!first) </span><br><span class="line">                putchar(&apos; &apos;);</span><br><span class="line">first = 0;</span><br><span class="line">writeint(i);</span><br><span class="line">&#125;</span><br><span class="line">putchar(&apos;\n&apos;);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述优化使得运行时间缩短了约$\frac{2}{3}$。一般情况下，当输入输出数据量很大时，应尽量用scanf和printf函数（而不是cin和cout）；如果时间效率还不够高，应逐字符输入输出，就像上面的readint和writeint函数。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于数据量太大，这里不建议使用快排函数。这里可以利用整数范围很小这个条件来使用计数排序方法。下面是程序代码：
    
    </summary>
    
      <category term="题解" scheme="https://gandyli.xyz/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://gandyli.xyz/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="UVa" scheme="https://gandyli.xyz/tags/UVa/"/>
    
  </entry>
  
  <entry>
    <title>题解 Luogu P2955 【USACO09OCT 奇数偶数Even? Odd? 】</title>
    <link href="https://gandyli.xyz/archives/%E9%A2%98%E8%A7%A3-Luogu-P2955-%E3%80%90USACO09OCT-%E5%A5%87%E6%95%B0%E5%81%B6%E6%95%B0Even-Odd-%E3%80%91/"/>
    <id>https://gandyli.xyz/archives/题解-Luogu-P2955-【USACO09OCT-奇数偶数Even-Odd-】/</id>
    <published>2018-12-22T06:22:34.000Z</published>
    <updated>2018-12-26T13:24:47.470Z</updated>
    
    <content type="html"><![CDATA[<p>这题其实很简单，代码相信大家都能看懂，只要注意C++的不要用<code>long long</code>，pascal的不要用<code>int64</code>，大家用<code>string</code>就可以了。<a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="keyword">while</span> (T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (((str.back() ^ <span class="number">48</span>) &amp; <span class="number">1</span>) ? <span class="string">"odd"</span> : <span class="string">"even"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这题其实很简单，代码相信大家都能看懂，只要注意C++的不要用&lt;code&gt;long long&lt;/code&gt;，pascal的不要用&lt;code&gt;int64&lt;/code&gt;，大家用&lt;code&gt;string&lt;/code&gt;就可以了。
    
    </summary>
    
      <category term="题解" scheme="https://gandyli.xyz/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://gandyli.xyz/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Luogu" scheme="https://gandyli.xyz/tags/Luogu/"/>
    
      <category term="USACO" scheme="https://gandyli.xyz/tags/USACO/"/>
    
      <category term="2009" scheme="https://gandyli.xyz/tags/2009/"/>
    
  </entry>
  
  <entry>
    <title>题解 Luogu P4711 【「化学」相对分子质量】</title>
    <link href="https://gandyli.xyz/archives/%E9%A2%98%E8%A7%A3-Luogu-P4711-%E3%80%90%E3%80%8C%E5%8C%96%E5%AD%A6%E3%80%8D%E7%9B%B8%E5%AF%B9%E5%88%86%E5%AD%90%E8%B4%A8%E9%87%8F%E3%80%91/"/>
    <id>https://gandyli.xyz/archives/题解-Luogu-P4711-【「化学」相对分子质量】/</id>
    <published>2018-12-22T06:20:21.000Z</published>
    <updated>2018-12-26T13:25:01.096Z</updated>
    
    <content type="html"><![CDATA[<p><del>话说这题为什么是 <code>提高+省选-</code></del><br>这题只要按照题目说的做就可以了（用递归会比较好）<br>代码如下：<a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;cctype&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">map&lt;string, double&gt; m;</span><br><span class="line">void init()</span><br><span class="line">&#123;</span><br><span class="line">    m[&quot;H&quot;] = 1;</span><br><span class="line">    m[&quot;C&quot;] = 12;</span><br><span class="line">    m[&quot;N&quot;] = 14;</span><br><span class="line">    m[&quot;O&quot;] = 16;</span><br><span class="line">    m[&quot;F&quot;] = 19;</span><br><span class="line">    m[&quot;Na&quot;] = 23;</span><br><span class="line">    m[&quot;Mg&quot;] = 24;</span><br><span class="line">    m[&quot;Al&quot;] = 27;</span><br><span class="line">    m[&quot;Si&quot;] = 28;</span><br><span class="line">    m[&quot;P&quot;] = 31;</span><br><span class="line">    m[&quot;S&quot;] = 32;</span><br><span class="line">    m[&quot;Cl&quot;] = 35.5;</span><br><span class="line">    m[&quot;K&quot;] = 39;</span><br><span class="line">    m[&quot;Ca&quot;] = 40;</span><br><span class="line">    m[&quot;Mn&quot;] = 55;</span><br><span class="line">    m[&quot;Fe&quot;] = 56;</span><br><span class="line">    m[&quot;Cu&quot;] = 64;</span><br><span class="line">    m[&quot;Zn&quot;] = 65;</span><br><span class="line">    m[&quot;Ag&quot;] = 108;</span><br><span class="line">    m[&quot;I&quot;] = 127;</span><br><span class="line">    m[&quot;Ba&quot;] = 137;</span><br><span class="line">    m[&quot;Hf&quot;] = 178.5;</span><br><span class="line">    m[&quot;Pt&quot;] = 195;</span><br><span class="line">    m[&quot;Au&quot;] = 197;</span><br><span class="line">    m[&quot;Hg&quot;] = 201;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">double f(string str)</span><br><span class="line">&#123;</span><br><span class="line">    if (m.count(str))</span><br><span class="line">        return m[str];</span><br><span class="line">    size_t pos = str.find(&apos;~&apos;);</span><br><span class="line">    if (pos != string::npos)</span><br><span class="line">        return f(str.substr(0, pos)) + f(str.substr(pos + 1));</span><br><span class="line">    if (isupper(str[0]))</span><br><span class="line">    &#123;</span><br><span class="line">        int t = 1, flag = bool(islower(str[1])), ok = 0;</span><br><span class="line">        if (str[flag + 1] == &apos;_&apos;)</span><br><span class="line">            t = stoi(str.substr(flag + 3, (pos = str.find(&apos;&#125;&apos;)) - flag - 3)), ok = 1;</span><br><span class="line">        return t * m[str.substr(0, flag + 1)] + f(str.substr(ok ? (pos + 1) : (flag + 1)));</span><br><span class="line">    &#125;</span><br><span class="line">    int t = 0, i = 0;</span><br><span class="line">    while (isdigit(str[i]))</span><br><span class="line">        t = t * 10 + str[i++] - &apos;0&apos;;</span><br><span class="line">    if (t &gt; 0)</span><br><span class="line">        return t * f(str.substr(i));</span><br><span class="line">    if (str[0] == &apos;(&apos;)</span><br><span class="line">    &#123;</span><br><span class="line">        int cnt = 1, len = str.length();</span><br><span class="line">        for (i = 1; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (str[i] == &apos;(&apos;)</span><br><span class="line">                cnt++;</span><br><span class="line">            else if (str[i] == &apos;)&apos;)</span><br><span class="line">                cnt--;</span><br><span class="line">            if (cnt == 0)</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        t = 1;</span><br><span class="line">        if(str[i + 1] == &apos;_&apos;)</span><br><span class="line">            t = stoi(str.substr(i + 3, (pos = str.find(i + 3, &apos;&#125;&apos;)) - i - 3)), cnt = 1;</span><br><span class="line">        return t * f(str.substr(1, i - 1)) + f(str.substr(cnt ? (i + 1) : (pos + 1)));</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    init();</span><br><span class="line">    string str;</span><br><span class="line">    cin &gt;&gt; str;</span><br><span class="line">    cout &lt;&lt; f(str) &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码可能有点乱，但只要认真一看就会发现其实这题很简单。<br>大家有没有注意到代码中的<code>f</code>函数中，用到了一个函数<code>stoi</code>，这个函数是<code>C++11</code>新增的，可以把字符串变成整数。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;话说这题为什么是 &lt;code&gt;提高+省选-&lt;/code&gt;&lt;/del&gt;&lt;br&gt;这题只要按照题目说的做就可以了（用递归会比较好）&lt;br&gt;代码如下：
    
    </summary>
    
      <category term="题解" scheme="https://gandyli.xyz/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://gandyli.xyz/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Luogu" scheme="https://gandyli.xyz/tags/Luogu/"/>
    
  </entry>
  
  <entry>
    <title>题解 Luogu P3879 【TJOI2010 阅读理解】</title>
    <link href="https://gandyli.xyz/archives/%E9%A2%98%E8%A7%A3-Luogu-P3879-%E3%80%90TJOI2010-%E9%98%85%E8%AF%BB%E7%90%86%E8%A7%A3%E3%80%91/"/>
    <id>https://gandyli.xyz/archives/题解-Luogu-P3879-【TJOI2010-阅读理解】/</id>
    <published>2018-12-22T04:14:05.000Z</published>
    <updated>2018-12-26T13:24:50.642Z</updated>
    
    <content type="html"><![CDATA[<p><del>这题难道没人用平板电视（<code>pb_ds</code>）吗</del><br>思路：<del>没思路</del><br>就是用系统自带的<code>pb_ds</code>库，然后就没有然后了。<br>代码如下：  <a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ext/pb_ds/trie_policy.hpp&gt; // pb_ds头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds; <span class="comment">// pb_ds名称空间</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> trie&lt;<span class="built_in">string</span>, null_type, trie_string_access_traits&lt;&gt;, pat_trie_tag, trie_prefix_search_node_update&gt; Trie;</span><br><span class="line">Trie tr[<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> siz;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; siz;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; siz; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> tmp;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; tmp;</span><br><span class="line">            tr[i].insert(tmp); <span class="comment">// 插入到字典树中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> tmp;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; tmp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">if</span> (tr[i].find(tmp) != tr[i].end()) <span class="comment">// 如果找到，就输出</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>很简单吧！<br>最后，如果要在NOIP中使用pb_ds库，切记不能加<code>using namespace __gnu_pbds;</code>，需要在用到的时候加上<code>__gnu_pbds::</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;这题难道没人用平板电视（&lt;code&gt;pb_ds&lt;/code&gt;）吗&lt;/del&gt;&lt;br&gt;思路：&lt;del&gt;没思路&lt;/del&gt;&lt;br&gt;就是用系统自带的&lt;code&gt;pb_ds&lt;/code&gt;库，然后就没有然后了。&lt;br&gt;代码如下：
    
    </summary>
    
      <category term="题解" scheme="https://gandyli.xyz/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://gandyli.xyz/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Luogu" scheme="https://gandyli.xyz/tags/Luogu/"/>
    
      <category term="TJOI" scheme="https://gandyli.xyz/tags/TJOI/"/>
    
      <category term="2010" scheme="https://gandyli.xyz/tags/2010/"/>
    
  </entry>
  
  <entry>
    <title>题解 Luogu P1689 【方程求解】</title>
    <link href="https://gandyli.xyz/archives/%E9%A2%98%E8%A7%A3-Luogu-P1689-%E3%80%90%E6%96%B9%E7%A8%8B%E6%B1%82%E8%A7%A3%E3%80%91/"/>
    <id>https://gandyli.xyz/archives/题解-Luogu-P1689-【方程求解】/</id>
    <published>2018-12-22T04:10:42.000Z</published>
    <updated>2018-12-26T13:24:45.131Z</updated>
    
    <content type="html"><![CDATA[<p>这一题基本思路就是模拟，如果想出来了几乎没什么难度。字符串用<code>C++</code>自带的<code>string类</code>就可以，非常方便。注意题目说可能有多余的空格，因此在输入后还要再转换到一个新的字符串里面。</p><p>代码中我多次用到了一个函数<code>stoi</code>，从<code>C++11</code>才支持，因此在竞赛中不可以使用。我在这里自己写了一个<code>stoi2</code>，供大家参考。<a id="more"></a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">stoi2</span><span class="params">(<span class="built_in">string</span> str)</span> <span class="comment">// 支持负数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (str[<span class="number">0</span>] == <span class="string">'-'</span>)</span><br><span class="line">        f = <span class="number">-1</span>, str = str.substr(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; str.length(); i++)</span><br><span class="line">        x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (str[i] ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>其实就是快读</del>  </p><hr><p>主程序代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">stoi2</span><span class="params">(<span class="built_in">string</span> str)</span> <span class="comment">// 支持负数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (str[<span class="number">0</span>] == <span class="string">'-'</span>)</span><br><span class="line">        f = <span class="number">-1</span>, str = str.substr(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; str.length(); i++)</span><br><span class="line">        x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (str[i] ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    getline(<span class="built_in">cin</span>, str);</span><br><span class="line">    <span class="built_in">string</span> newstr;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; c : str)</span><br><span class="line">        <span class="keyword">if</span> (c != <span class="string">' '</span>)</span><br><span class="line">            newstr.push_back(c);</span><br><span class="line">    <span class="keyword">size_t</span> posq = newstr.find(<span class="string">'?'</span>), posp = newstr.find(<span class="string">'+'</span>), posj = newstr.find(<span class="string">'-'</span>), pose = newstr.find(<span class="string">'='</span>);</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    <span class="keyword">if</span> (posq &gt; pose)</span><br><span class="line">        <span class="keyword">if</span> (posp != <span class="built_in">string</span>::npos)</span><br><span class="line">            ans = stoi(newstr.substr(<span class="number">0</span>, posp)) + stoi(<span class="built_in">string</span>(newstr.begin() + posp + <span class="number">1</span>, newstr.begin() + pose));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ans = stoi(newstr.substr(<span class="number">0</span>, posj)) - stoi(<span class="built_in">string</span>(newstr.begin() + posj + <span class="number">1</span>, newstr.begin() + pose));</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (posp != <span class="built_in">string</span>::npos)</span><br><span class="line">        <span class="keyword">if</span> (posp &gt; posq)</span><br><span class="line">            ans = stoi(newstr.substr(pose + <span class="number">1</span>)) - stoi(<span class="built_in">string</span>(newstr.begin() + posp + <span class="number">1</span>, newstr.begin() + pose));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ans = stoi(newstr.substr(pose + <span class="number">1</span>)) - stoi(newstr.substr(<span class="number">0</span>, posp));</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> (posj &gt; posq)</span><br><span class="line">            ans = stoi(<span class="built_in">string</span>(newstr.begin() + posj + <span class="number">1</span>, newstr.begin() + pose)) + stoi(newstr.substr(pose + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ans = stoi(newstr.substr(<span class="number">0</span>, posj)) - stoi(newstr.substr(pose + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看起来可能有点乱，但是如果你仔细分析这些句子的意思，就能明白其中的意思。（<del>怎么跟语文一样QAQ</del>）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这一题基本思路就是模拟，如果想出来了几乎没什么难度。字符串用&lt;code&gt;C++&lt;/code&gt;自带的&lt;code&gt;string类&lt;/code&gt;就可以，非常方便。注意题目说可能有多余的空格，因此在输入后还要再转换到一个新的字符串里面。&lt;/p&gt;
&lt;p&gt;代码中我多次用到了一个函数&lt;code&gt;stoi&lt;/code&gt;，从&lt;code&gt;C++11&lt;/code&gt;才支持，因此在竞赛中不可以使用。我在这里自己写了一个&lt;code&gt;stoi2&lt;/code&gt;，供大家参考。
    
    </summary>
    
      <category term="题解" scheme="https://gandyli.xyz/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://gandyli.xyz/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Luogu" scheme="https://gandyli.xyz/tags/Luogu/"/>
    
  </entry>
  
  <entry>
    <title>题解 UVA232 【Crossword Answers】</title>
    <link href="https://gandyli.xyz/archives/%E9%A2%98%E8%A7%A3-UVA232-%E3%80%90Crossword-Answers%E3%80%91/"/>
    <id>https://gandyli.xyz/archives/题解-UVA232-【Crossword-Answers】/</id>
    <published>2018-12-22T04:09:47.000Z</published>
    <updated>2018-12-26T13:25:10.045Z</updated>
    
    <content type="html"><![CDATA[<p>这一题主要就是按照题意模拟，先找出“起始格”，把起始格的序列存到<code>vector数组</code>里面，然后再遍历<code>vector数组</code>，按照题意输出即可（每个点最多打印一次）。另外还要注意UVa题目的输出格式，非常坑。其他的注释应该讲明白了吧。</p><p>Code：<a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> A[maxn][maxn]; <span class="comment">// 输入存在这个数组里</span></span><br><span class="line"><span class="keyword">bool</span> vis[maxn][maxn]; <span class="comment">// 这个点是否打印过</span></span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; v; <span class="comment">// 存起始点的vector数组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, kase = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &amp;&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">        <span class="keyword">if</span> (kase++)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"puzzle #"</span> &lt;&lt; kase &lt;&lt; <span class="string">":"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; A[i][j];</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">        v.clear();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">                <span class="keyword">if</span> ((!i || !j || A[i - <span class="number">1</span>][j] == <span class="string">'*'</span> || A[i][j - <span class="number">1</span>] == <span class="string">'*'</span>) &amp;&amp; A[i][j] != <span class="string">'*'</span>) <span class="comment">// 在边界或者左边相邻位置是黑格或者上边相邻位置是黑格。注意这个格子不能是黑格</span></span><br><span class="line">                    v.emplace_back(i, j);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Across"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; v.size(); i++)</span><br><span class="line">            <span class="keyword">if</span> (!vis[v[i].first][v[i].second])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; setw(<span class="number">3</span>) &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">"."</span>; <span class="comment">// 宽度为3，setw的头文件是iomanip</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = v[i].second; j &lt; m; j++)</span><br><span class="line">                    <span class="keyword">if</span> (A[v[i].first][j] == <span class="string">'*'</span>)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="built_in">cout</span>.put(A[v[i].first][j]), vis[v[i].first][j] = <span class="literal">true</span>; <span class="comment">// 输出字符并打标记</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis)); <span class="comment">// 重置数组</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Down"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; v.size(); i++)</span><br><span class="line">            <span class="keyword">if</span> (!vis[v[i].first][v[i].second])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; setw(<span class="number">3</span>) &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">"."</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = v[i].first; j &lt; n; j++)</span><br><span class="line">                    <span class="keyword">if</span> (A[j][v[i].second] == <span class="string">'*'</span>)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="built_in">cout</span>.put(A[j][v[i].second]),</span><br><span class="line">                            vis[j][v[i].second] = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这一题主要就是按照题意模拟，先找出“起始格”，把起始格的序列存到&lt;code&gt;vector数组&lt;/code&gt;里面，然后再遍历&lt;code&gt;vector数组&lt;/code&gt;，按照题意输出即可（每个点最多打印一次）。另外还要注意UVa题目的输出格式，非常坑。其他的注释应该讲明白了吧。&lt;/p&gt;
&lt;p&gt;Code：
    
    </summary>
    
      <category term="题解" scheme="https://gandyli.xyz/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://gandyli.xyz/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="UVa" scheme="https://gandyli.xyz/tags/UVa/"/>
    
  </entry>
  
  <entry>
    <title>题解 UVA11879 【Multiple of 17】</title>
    <link href="https://gandyli.xyz/archives/%E9%A2%98%E8%A7%A3-UVA11879-%E3%80%90Multiple-of-17%E3%80%91/"/>
    <id>https://gandyli.xyz/archives/题解-UVA11879-【Multiple-of-17】/</id>
    <published>2018-12-22T04:08:43.000Z</published>
    <updated>2018-12-26T13:24:15.971Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目：UVa11879-Multiple-of-17"><a href="#题目：UVa11879-Multiple-of-17" class="headerlink" title="题目：UVa11879 Multiple of 17"></a>题目：<code>UVa11879</code> <code>Multiple of 17</code></h2><h3 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h3><p>给出$N(1\leq N\leq 10^{100})$，判断$N \text{mod} 17$的结果是不是$0$。是则输出$1$，不是则输出$0$。  </p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入包含多组数据，每组数据只有一行，为$N$。输入以$0$结束。  </p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对于每组数据，输出$1$或$0$。<a id="more"></a></p><hr><h2 id="基础知识："><a href="#基础知识：" class="headerlink" title="基础知识："></a>基础知识：</h2><p>首先，我们要记住几个公式：<br>$$(a+b) \text{mod} n=((a \text{mod} n)+(b \text{mod} n)) \text{mod} n$$<br>$$(a-b) \text{mod} n=((a \text{mod} n)-(b \text{mod} n) + n) \text{mod} n$$<br>$$ab \text{mod} n=(a \text{mod} n)(b \text{mod} n) \text{mod} n$$<br>注意在减法中，由于$a \text{mod} n$可能小于$b \text{mod} n$，需要在结果加上$n$，而在乘法中，需要注意$a \text{mod} n$和$b \text{mod} n$相乘是否会溢出。一般乘法要用<code>long long</code>保存中间结果，例如：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul_mod</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">a %= n; b %= n;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">int</span>((<span class="keyword">long</span> <span class="keyword">long</span>)a * b % n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="问题求解："><a href="#问题求解：" class="headerlink" title="问题求解："></a>问题求解：</h2><p>现在我们回到问题上来。首先读入的是字符串，因为$10^{100}$太大了，<code>long long</code>都存不下。然后把大整数写成“自左向右”的形式：$1234=((1\times 10+2)\times 10+3)\times 10+4$，然后用前面的公式，每步取模。  </p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> ((~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, str)) &amp;&amp; str[<span class="number">0</span>] != <span class="string">'0'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str), ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">            ans = <span class="keyword">int</span>(((<span class="keyword">long</span> <span class="keyword">long</span>)ans * <span class="number">10</span> + str[i] - <span class="string">'0'</span>) % <span class="number">17</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, !ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，也可以把<code>ans</code>声明成<code>long long</code>类型的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目：UVa11879-Multiple-of-17&quot;&gt;&lt;a href=&quot;#题目：UVa11879-Multiple-of-17&quot; class=&quot;headerlink&quot; title=&quot;题目：UVa11879 Multiple of 17&quot;&gt;&lt;/a&gt;题目：&lt;code&gt;UVa11879&lt;/code&gt; &lt;code&gt;Multiple of 17&lt;/code&gt;&lt;/h2&gt;&lt;h3 id=&quot;题目大意：&quot;&gt;&lt;a href=&quot;#题目大意：&quot; class=&quot;headerlink&quot; title=&quot;题目大意：&quot;&gt;&lt;/a&gt;题目大意：&lt;/h3&gt;&lt;p&gt;给出$N(1\leq N\leq 10^{100})$，判断$N \text{mod} 17$的结果是不是$0$。是则输出$1$，不是则输出$0$。  &lt;/p&gt;
&lt;h3 id=&quot;输入格式：&quot;&gt;&lt;a href=&quot;#输入格式：&quot; class=&quot;headerlink&quot; title=&quot;输入格式：&quot;&gt;&lt;/a&gt;输入格式：&lt;/h3&gt;&lt;p&gt;输入包含多组数据，每组数据只有一行，为$N$。输入以$0$结束。  &lt;/p&gt;
&lt;h3 id=&quot;输出格式：&quot;&gt;&lt;a href=&quot;#输出格式：&quot; class=&quot;headerlink&quot; title=&quot;输出格式：&quot;&gt;&lt;/a&gt;输出格式：&lt;/h3&gt;&lt;p&gt;对于每组数据，输出$1$或$0$。
    
    </summary>
    
      <category term="题解" scheme="https://gandyli.xyz/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://gandyli.xyz/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="UVa" scheme="https://gandyli.xyz/tags/UVa/"/>
    
  </entry>
  
  <entry>
    <title>题解 UVA822 【Queue and A】</title>
    <link href="https://gandyli.xyz/archives/%E9%A2%98%E8%A7%A3-UVA822-%E3%80%90Queue-and-A%E3%80%91/"/>
    <id>https://gandyli.xyz/archives/题解-UVA822-【Queue-and-A】/</id>
    <published>2018-12-22T04:05:11.000Z</published>
    <updated>2018-12-26T13:25:17.009Z</updated>
    
    <content type="html"><![CDATA[<p>核心部分的逻辑是将所有要发生的事情用事件来表示，用优先级队列来维护所有的事件，循环着每次从中取出最早的一个事件，然后按照时间类型进行分类处理：<a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Event</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> time, id;</span><br><span class="line">    <span class="keyword">bool</span> isRorC; <span class="comment">// 是请求到达还是客服空闲事件</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>输入时，每种请求就实现生成<code>num</code>个事件放到事件队列中。模拟的循环中，每个时间点，用<code>multiset&lt;int&gt;</code>作为要服务的请求队列，使用<code>multiset</code>是因为队列中可能用相同主题的请求。同时用一个<code>set</code>维护空闲的客服编号。</p><p>首先取出所有时间相同的队首事件，挨个进行处理。</p><ol><li>如果是请求事件，就放到请求队列。</li><li>如果是客服事件，就将客服加到空闲客服集合中。</li></ol><p>然后就是针对当前空闲客服以及请求队列中的请求进行匹配处理。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (请求队列非空 &amp;&amp; 空闲客服集合非空)</span><br><span class="line">&#123;</span><br><span class="line">(<span class="number">1</span>) 针对每个请求建立一个集合<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;，放置所有可以服务此请求的客服编号，编号排序规则参考题目的表述。</span><br><span class="line">    (<span class="number">2</span>) 先将每个客服按照优先级分配到其能处理的每个任务的集合中。</span><br><span class="line">    (<span class="number">3</span>) 如果没有进行匹配，直接退出<span class="keyword">while</span>循环。</span><br><span class="line">    (<span class="number">4</span>) 按照之前分配好的任务集合给客服分配任务，对于每个分配好的客服，要构造一个其变为空闲的事件，放入事件队列。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整程序如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">21</span>, maxm = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Event</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> time, id;</span><br><span class="line"><span class="keyword">bool</span> isRorC;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Event &amp;rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> time &gt; rhs.time; &#125;</span><br><span class="line">Event(<span class="keyword">int</span> t, <span class="keyword">int</span> i, <span class="keyword">bool</span> isr = <span class="literal">true</span>) : time(t), id(i), isRorC(isr) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ReqInfo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> tid, num, t0, t, dt;</span><br><span class="line">&#125; reqs[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StaffInfo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> tids[maxn], pid, k, idx, last, req;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> StaffInfo &amp;rhs) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> last &lt; rhs.last || (last == rhs.last &amp;&amp; pid &lt; rhs.pid);</span><br><span class="line">&#125;</span><br><span class="line">&#125; staffs[maxm];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Comp</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> lhs, <span class="keyword">int</span> rhs)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> staffs[lhs] &lt; staffs[rhs]; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; rQs;</span><br><span class="line">priority_queue&lt;Event&gt; em;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; freeStaffs;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>, Comp&gt; rt[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m, kase = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> Time = em.top().time;</span><br><span class="line"><span class="keyword">while</span> (!em.empty() &amp;&amp; Time == em.top().time)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">auto</span> &amp;e = em.top();</span><br><span class="line"><span class="keyword">if</span> (e.isRorC)</span><br><span class="line">rQs.insert(e.id);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">freeStaffs.insert(e.id);</span><br><span class="line">em.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!rQs.empty() &amp;&amp; !freeStaffs.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">rt[i].clear();</span><br><span class="line"><span class="keyword">bool</span> canAssign = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : freeStaffs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> &amp;si = staffs[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; si.k; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tid = si.tids[j];</span><br><span class="line"><span class="keyword">if</span> (!rQs.count(tid))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">canAssign = <span class="literal">true</span>;</span><br><span class="line">rt[tid].insert(si.idx);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!canAssign)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> &amp;ss = rt[i];</span><br><span class="line"><span class="keyword">while</span> (rQs.count(i) &amp;&amp; !ss.empty())</span><br><span class="line">&#123;</span><br><span class="line">rQs.erase(rQs.find(i));</span><br><span class="line"><span class="keyword">int</span> si = *(ss.begin());</span><br><span class="line"><span class="keyword">auto</span> &amp;s = staffs[si];</span><br><span class="line">s.last = Time;</span><br><span class="line">em.push(Event(Time + reqs[i].t, s.idx, <span class="literal">false</span>));</span><br><span class="line">freeStaffs.erase(s.idx);</span><br><span class="line">ss.erase(si);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (em.empty())</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Scenario "</span> &lt;&lt; ++kase &lt;&lt; <span class="string">": All requests are serviced within "</span> &lt;&lt; Time &lt;&lt; <span class="string">" minutes."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; tids;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &amp;&amp; n)</span><br><span class="line">&#123;</span><br><span class="line">freeStaffs.clear(), tids.clear(), rQs.clear();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> &amp;r = reqs[i];</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; r.tid &gt;&gt; r.num &gt;&gt; r.t0 &gt;&gt; r.t &gt;&gt; r.dt;</span><br><span class="line">tids[r.tid] = i;</span><br><span class="line">r.tid = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; r.num; j++)</span><br><span class="line">em.push(Event(r.t0 + r.dt * j, i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> &amp;s = staffs[i];</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s.pid &gt;&gt; s.k;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; s.k; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s.tids[j];</span><br><span class="line">s.tids[j] = tids[s.tids[j]];</span><br><span class="line">&#125;</span><br><span class="line">s.last = <span class="number">0</span>;</span><br><span class="line">s.idx = i;</span><br><span class="line">em.push(Event(<span class="number">0</span>, s.idx, <span class="literal">false</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!em.empty())</span><br><span class="line">solve();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此类离散事件模拟类的题目最关键是要掌握事件概念的抽象方法以及优先级队列的使用。<a href="https://vjudge.net/problem/UVA-212" target="_blank" rel="noopener">UVa212</a>也是一个很好的此类题目。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;核心部分的逻辑是将所有要发生的事情用事件来表示，用优先级队列来维护所有的事件，循环着每次从中取出最早的一个事件，然后按照时间类型进行分类处理：
    
    </summary>
    
      <category term="题解" scheme="https://gandyli.xyz/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://gandyli.xyz/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="UVa" scheme="https://gandyli.xyz/tags/UVa/"/>
    
  </entry>
  
  <entry>
    <title>题解 Luogu P5082 【成绩】</title>
    <link href="https://gandyli.xyz/archives/%E9%A2%98%E8%A7%A3-Luogu-P5082-%E3%80%90%E6%88%90%E7%BB%A9%E3%80%91/"/>
    <id>https://gandyli.xyz/archives/题解-Luogu-P5082-【成绩】/</id>
    <published>2018-12-22T04:04:10.000Z</published>
    <updated>2018-12-26T13:25:04.733Z</updated>
    
    <content type="html"><![CDATA[<p>这道题非常简单（废话），但要注意这题卡输入，只能用scanf/快读/ios::sync_with_stdio(false)+cin。</p><p>完整代码如下：<a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10000005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> A[maxn], B[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>；</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, A + i), sum += A[i];</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum2 = <span class="number">0</span>, sum3 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, B + i), sum2 += B[i], sum3 += A[i] - B[i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.6f\n"</span>, <span class="keyword">double</span>(sum * <span class="number">3</span> - sum2 * <span class="number">2</span>) / sum3);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后要转换成<code>double</code>进行输出。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这道题非常简单（废话），但要注意这题卡输入，只能用scanf/快读/ios::sync_with_stdio(false)+cin。&lt;/p&gt;
&lt;p&gt;完整代码如下：
    
    </summary>
    
      <category term="题解" scheme="https://gandyli.xyz/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://gandyli.xyz/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Luogu" scheme="https://gandyli.xyz/tags/Luogu/"/>
    
  </entry>
  
  <entry>
    <title>题解 Luogu P4470 【BJWC2018 售票】</title>
    <link href="https://gandyli.xyz/archives/%E9%A2%98%E8%A7%A3-Luogu-P4470-%E3%80%90BJWC2018-%E5%94%AE%E7%A5%A8%E3%80%91/"/>
    <id>https://gandyli.xyz/archives/题解-Luogu-P4470-【BJWC2018-售票】/</id>
    <published>2018-12-22T03:59:34.000Z</published>
    <updated>2018-12-26T13:24:58.185Z</updated>
    
    <content type="html"><![CDATA[<p>这是一道字符串的模拟题。我们可以利用<code>C++</code>的<code>string</code>来简化我们的代码。其实存储屏幕上的字母只需要用一维数组，然后在输出的时候处理一下。</p><p>把所有的都输入完以后，检查哪个目的地字符串的前缀是当前打进去的字符，然后把这个目的地前缀的后一个字符填充到屏幕里面。思路非常简单。</p><p>代码如下：<a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">55</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> A[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; A[i];</span><br><span class="line"><span class="built_in">string</span> read;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; read;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">screen</span><span class="params">(<span class="number">32</span>, <span class="string">'*'</span>)</span></span>;</span><br><span class="line"><span class="keyword">size_t</span> readlen = read.length();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">if</span> (A[i].substr(<span class="number">0</span>, readlen) == read &amp;&amp; A[i].length() &gt; readlen) <span class="comment">// 注意这个目的地的长度必须大于读入的前缀</span></span><br><span class="line">screen[A[i][readlen] - <span class="string">'A'</span> + <span class="number">3</span>] = A[i][readlen];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; screen.length(); i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span>.put(screen[i]);</span><br><span class="line">    <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">8</span> == <span class="number">0</span> &amp;&amp; i)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一道字符串的模拟题。我们可以利用&lt;code&gt;C++&lt;/code&gt;的&lt;code&gt;string&lt;/code&gt;来简化我们的代码。其实存储屏幕上的字母只需要用一维数组，然后在输出的时候处理一下。&lt;/p&gt;
&lt;p&gt;把所有的都输入完以后，检查哪个目的地字符串的前缀是当前打进去的字符，然后把这个目的地前缀的后一个字符填充到屏幕里面。思路非常简单。&lt;/p&gt;
&lt;p&gt;代码如下：
    
    </summary>
    
      <category term="题解" scheme="https://gandyli.xyz/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://gandyli.xyz/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Luogu" scheme="https://gandyli.xyz/tags/Luogu/"/>
    
      <category term="BJWC" scheme="https://gandyli.xyz/tags/BJWC/"/>
    
      <category term="2018" scheme="https://gandyli.xyz/tags/2018/"/>
    
  </entry>
  
  <entry>
    <title>题解 UVA1146 【Now or later】</title>
    <link href="https://gandyli.xyz/archives/%E9%A2%98%E8%A7%A3-UVA1146-%E3%80%90Now-or-later%E3%80%91/"/>
    <id>https://gandyli.xyz/archives/题解-UVA1146-【Now-or-later】/</id>
    <published>2018-12-22T03:56:09.000Z</published>
    <updated>2018-12-26T13:24:34.306Z</updated>
    
    <content type="html"><![CDATA[<p>“最小值尽量大”的典型处理方法是二分查找最终答案$P$。这样，原来的问题转化为了判定问题“是否存在一个调度方案，使得相邻两个着陆时间差总是不小于$P$”，而这个问题可以进一步转化为：任意两个着陆时间差总是不小于$P$。令bool变量$x_i$表示第$i$架飞机是否早着陆，则唯一的限制就是“时间差小于$P$的两个着陆时间不能同时满足”。例如，若$E_i$和$L_i$的时间差小于$P$，则不能同时满足$x_i=true$和$x_j=false$。每一组不能同时满足的着陆时间对应于一个子句，则整个约束条件对应于一个$2-SAT$问题的实例，包含$n$个变量和不超过$n(n-1)/2$个子句。<a id="more"></a></p><p>考虑到还要在所有$O(n^2)$种可能的答案中二分查找，总时间复杂度为$O(n^2\log n)$。考虑到时间的范围比较大，也可以直接二分时间的数值，时间复杂度为$O(n^2\log T)$，其中$T$为所有时间的最大值。</p><p>代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">20005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoSAT</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">bool</span> mark[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> S[maxn &lt;&lt; <span class="number">1</span>], c;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (mark[x ^ <span class="number">1</span>])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (mark[x])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">mark[x] = <span class="literal">true</span>;</span><br><span class="line">S[c++] = x;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; G[x].size(); i++)</span><br><span class="line"><span class="keyword">if</span> (!dfs(G[x][i]))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_clause</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> xval, <span class="keyword">int</span> y, <span class="keyword">int</span> yval)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">1</span>) + xval;</span><br><span class="line">y = (y &lt;&lt; <span class="number">1</span>) + yval;</span><br><span class="line">G[x ^ <span class="number">1</span>].push_back(y);</span><br><span class="line">G[y ^ <span class="number">1</span>].push_back(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (n &lt;&lt; <span class="number">1</span>); i += <span class="number">2</span>)</span><br><span class="line"><span class="keyword">if</span> (!mark[i] &amp;&amp; !mark[i + <span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> (c = <span class="number">0</span>; !dfs(i))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (c &gt; <span class="number">0</span>)</span><br><span class="line">mark[S[--c]] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (!dfs(i + <span class="number">1</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;n = n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (n &lt;&lt; <span class="number">1</span>); i++)</span><br><span class="line">G[i].clear();</span><br><span class="line"><span class="built_in">memset</span>(mark, <span class="number">0</span>, <span class="keyword">sizeof</span>(mark));</span><br><span class="line">&#125;</span><br><span class="line">&#125; solver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T[maxn][<span class="number">2</span>], n;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> diff)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">solver.init(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; <span class="number">2</span>; a++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt; <span class="number">2</span>; b++)</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>(T[i][a] - T[j][b]) &lt; diff)</span><br><span class="line">solver.add_clause(i, a ^ <span class="number">1</span>, j, b ^ <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> solver.solve();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> L = <span class="number">0</span>, R = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; <span class="number">2</span>; a++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T[i][a]), R = max(R, T[i][a]);</span><br><span class="line"><span class="keyword">while</span> (L &lt; R)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> M = L + ((R - L + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (check(M))</span><br><span class="line">L = M;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">R = M - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, L);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“最小值尽量大”的典型处理方法是二分查找最终答案$P$。这样，原来的问题转化为了判定问题“是否存在一个调度方案，使得相邻两个着陆时间差总是不小于$P$”，而这个问题可以进一步转化为：任意两个着陆时间差总是不小于$P$。令bool变量$x_i$表示第$i$架飞机是否早着陆，则唯一的限制就是“时间差小于$P$的两个着陆时间不能同时满足”。例如，若$E_i$和$L_i$的时间差小于$P$，则不能同时满足$x_i=true$和$x_j=false$。每一组不能同时满足的着陆时间对应于一个子句，则整个约束条件对应于一个$2-SAT$问题的实例，包含$n$个变量和不超过$n(n-1)/2$个子句。
    
    </summary>
    
      <category term="题解" scheme="https://gandyli.xyz/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="https://gandyli.xyz/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="UVa" scheme="https://gandyli.xyz/tags/UVa/"/>
    
  </entry>
  
</feed>
