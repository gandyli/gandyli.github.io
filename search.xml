<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>题解 UVA822 【Queue and A】</title>
      <link href="/%E9%A2%98%E8%A7%A3/%E9%A2%98%E8%A7%A3-UVA822-%E3%80%90Queue-and-A%E3%80%91/"/>
      <url>/%E9%A2%98%E8%A7%A3/%E9%A2%98%E8%A7%A3-UVA822-%E3%80%90Queue-and-A%E3%80%91/</url>
      
        <content type="html"><![CDATA[<p>核心部分的逻辑是将所有要发生的事情用事件来表示，用优先级队列来维护所有的事件，循环着每次从中取出最早的一个事件，然后按照时间类型进行分类处理：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Event</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> time, id;</span><br><span class="line">    <span class="keyword">bool</span> isRorC; <span class="comment">// 是请求到达还是客服空闲事件</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>输入时，每种请求就实现生成<code>num</code>个事件放到事件队列中。模拟的循环中，每个时间点，用<code>multiset&lt;int&gt;</code>作为要服务的请求队列，使用<code>multiset</code>是因为队列中可能用相同主题的请求。同时用一个<code>set</code>维护空闲的客服编号。</p><p>首先取出所有时间相同的队首事件，挨个进行处理。</p><ol><li>如果是请求事件，就放到请求队列。</li><li>如果是客服事件，就将客服加到空闲客服集合中。</li></ol><p>然后就是针对当前空闲客服以及请求队列中的请求进行匹配处理。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (请求队列非空 &amp;&amp; 空闲客服集合非空)</span><br><span class="line">&#123;</span><br><span class="line">(<span class="number">1</span>) 针对每个请求建立一个集合<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;，放置所有可以服务此请求的客服编号，编号排序规则参考题目的表述。</span><br><span class="line">    (<span class="number">2</span>) 先将每个客服按照优先级分配到其能处理的每个任务的集合中。</span><br><span class="line">    (<span class="number">3</span>) 如果没有进行匹配，直接退出<span class="keyword">while</span>循环。</span><br><span class="line">    (<span class="number">4</span>) 按照之前分配好的任务集合给客服分配任务，对于每个分配好的客服，要构造一个其变为空闲的事件，放入事件队列。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整程序如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">21</span>, maxm = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Event</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> time, id;</span><br><span class="line"><span class="keyword">bool</span> isRorC;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Event &amp;rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> time &gt; rhs.time; &#125;</span><br><span class="line">Event(<span class="keyword">int</span> t, <span class="keyword">int</span> i, <span class="keyword">bool</span> isr = <span class="literal">true</span>) : time(t), id(i), isRorC(isr) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ReqInfo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> tid, num, t0, t, dt;</span><br><span class="line">&#125; reqs[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StaffInfo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> tids[maxn], pid, k, idx, last, req;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> StaffInfo &amp;rhs) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> last &lt; rhs.last || (last == rhs.last &amp;&amp; pid &lt; rhs.pid);</span><br><span class="line">&#125;</span><br><span class="line">&#125; staffs[maxm];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Comp</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> lhs, <span class="keyword">int</span> rhs)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> staffs[lhs] &lt; staffs[rhs]; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; rQs;</span><br><span class="line">priority_queue&lt;Event&gt; em;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; freeStaffs;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>, Comp&gt; rt[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m, kase = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> Time = em.top().time;</span><br><span class="line"><span class="keyword">while</span> (!em.empty() &amp;&amp; Time == em.top().time)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">auto</span> &amp;e = em.top();</span><br><span class="line"><span class="keyword">if</span> (e.isRorC)</span><br><span class="line">rQs.insert(e.id);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">freeStaffs.insert(e.id);</span><br><span class="line">em.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!rQs.empty() &amp;&amp; !freeStaffs.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">rt[i].clear();</span><br><span class="line"><span class="keyword">bool</span> canAssign = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : freeStaffs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> &amp;si = staffs[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; si.k; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tid = si.tids[j];</span><br><span class="line"><span class="keyword">if</span> (!rQs.count(tid))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">canAssign = <span class="literal">true</span>;</span><br><span class="line">rt[tid].insert(si.idx);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!canAssign)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> &amp;ss = rt[i];</span><br><span class="line"><span class="keyword">while</span> (rQs.count(i) &amp;&amp; !ss.empty())</span><br><span class="line">&#123;</span><br><span class="line">rQs.erase(rQs.find(i));</span><br><span class="line"><span class="keyword">int</span> si = *(ss.begin());</span><br><span class="line"><span class="keyword">auto</span> &amp;s = staffs[si];</span><br><span class="line">s.last = Time;</span><br><span class="line">em.push(Event(Time + reqs[i].t, s.idx, <span class="literal">false</span>));</span><br><span class="line">freeStaffs.erase(s.idx);</span><br><span class="line">ss.erase(si);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (em.empty())</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Scenario "</span> &lt;&lt; ++kase &lt;&lt; <span class="string">": All requests are serviced within "</span> &lt;&lt; Time &lt;&lt; <span class="string">" minutes."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; tids;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &amp;&amp; n)</span><br><span class="line">&#123;</span><br><span class="line">freeStaffs.clear(), tids.clear(), rQs.clear();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> &amp;r = reqs[i];</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; r.tid &gt;&gt; r.num &gt;&gt; r.t0 &gt;&gt; r.t &gt;&gt; r.dt;</span><br><span class="line">tids[r.tid] = i;</span><br><span class="line">r.tid = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; r.num; j++)</span><br><span class="line">em.push(Event(r.t0 + r.dt * j, i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> &amp;s = staffs[i];</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s.pid &gt;&gt; s.k;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; s.k; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s.tids[j];</span><br><span class="line">s.tids[j] = tids[s.tids[j]];</span><br><span class="line">&#125;</span><br><span class="line">s.last = <span class="number">0</span>;</span><br><span class="line">s.idx = i;</span><br><span class="line">em.push(Event(<span class="number">0</span>, s.idx, <span class="literal">false</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!em.empty())</span><br><span class="line">solve();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此类离散事件模拟类的题目最关键是要掌握事件概念的抽象方法以及优先级队列的使用。<a href="https://vjudge.net/problem/UVA-212" target="_blank" rel="noopener">UVa212</a>也是一个很好的此类题目。</p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> UVa </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>题解 Luogu P5082 【成绩】</title>
      <link href="/%E9%A2%98%E8%A7%A3/%E9%A2%98%E8%A7%A3-Luogu-P5082-%E3%80%90%E6%88%90%E7%BB%A9%E3%80%91/"/>
      <url>/%E9%A2%98%E8%A7%A3/%E9%A2%98%E8%A7%A3-Luogu-P5082-%E3%80%90%E6%88%90%E7%BB%A9%E3%80%91/</url>
      
        <content type="html"><![CDATA[<p>这道题非常简单（废话），但要注意这题卡输入，只能用scanf/快读/ios::sync_with_stdio(false)+cin。</p><p>完整代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10000005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> A[maxn], B[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>；</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, A + i), sum += A[i];</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum2 = <span class="number">0</span>, sum3 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, B + i), sum2 += B[i], sum3 += A[i] - B[i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.6f\n"</span>, <span class="keyword">double</span>(sum * <span class="number">3</span> - sum2 * <span class="number">2</span>) / sum3);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后要转换成<code>double</code>进行输出。</p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>题解 P4470 【[BJWC2018]售票】</title>
      <link href="/%E9%A2%98%E8%A7%A3/%E9%A2%98%E8%A7%A3-P4470-%E3%80%90-BJWC2018-%E5%94%AE%E7%A5%A8%E3%80%91/"/>
      <url>/%E9%A2%98%E8%A7%A3/%E9%A2%98%E8%A7%A3-P4470-%E3%80%90-BJWC2018-%E5%94%AE%E7%A5%A8%E3%80%91/</url>
      
        <content type="html"><![CDATA[<p>这是一道字符串的模拟题。我们可以利用<code>C++</code>的<code>string</code>来简化我们的代码。其实存储屏幕上的字母只需要用一维数组，然后在输出的时候处理一下。</p><p>把所有的都输入完以后，检查哪个目的地字符串的前缀是当前打进去的字符，然后把这个目的地前缀的后一个字符填充到屏幕里面。思路非常简单。</p><p>代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">55</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> A[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; A[i];</span><br><span class="line"><span class="built_in">string</span> read;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; read;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">screen</span><span class="params">(<span class="number">32</span>, <span class="string">'*'</span>)</span></span>;</span><br><span class="line"><span class="keyword">size_t</span> readlen = read.length();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">if</span> (A[i].substr(<span class="number">0</span>, readlen) == read &amp;&amp; A[i].length() &gt; readlen) <span class="comment">// 注意这个目的地的长度必须大于读入的前缀</span></span><br><span class="line">screen[A[i][readlen] - <span class="string">'A'</span> + <span class="number">3</span>] = A[i][readlen];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; screen.length(); i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span>.put(screen[i]);</span><br><span class="line">    <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">8</span> == <span class="number">0</span> &amp;&amp; i)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> BJWC </tag>
            
            <tag> 2018 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>题解 UVA1146 【Now or later】</title>
      <link href="/%E9%A2%98%E8%A7%A3/%E9%A2%98%E8%A7%A3-UVA1146-%E3%80%90Now-or-later%E3%80%91/"/>
      <url>/%E9%A2%98%E8%A7%A3/%E9%A2%98%E8%A7%A3-UVA1146-%E3%80%90Now-or-later%E3%80%91/</url>
      
        <content type="html"><![CDATA[<p>“最小值尽量大”的典型处理方法是二分查找最终答案$P$。这样，原来的问题转化为了判定问题“是否存在一个调度方案，使得相邻两个着陆时间差总是不小于$P$”，而这个问题可以进一步转化为：任意两个着陆时间差总是不小于$P$。令bool变量$x_i$表示第$i$架飞机是否早着陆，则唯一的限制就是“时间差小于$P$的两个着陆时间不能同时满足”。例如，若$E_i$和$L_i$的时间差小于$P$，则不能同时满足$x_i=true$和$x_j=false$。每一组不能同时满足的着陆时间对应于一个子句，则整个约束条件对应于一个$2-SAT$问题的实例，包含$n$个变量和不超过$n(n-1)/2$个子句。</p><p>考虑到还要在所有$O(n^2)$种可能的答案中二分查找，总时间复杂度为$O(n^2\log n)$。考虑到时间的范围比较大，也可以直接二分时间的数值，时间复杂度为$O(n^2\log T)$，其中$T$为所有时间的最大值。</p><p>代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">20005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoSAT</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">bool</span> mark[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> S[maxn &lt;&lt; <span class="number">1</span>], c;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (mark[x ^ <span class="number">1</span>])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (mark[x])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">mark[x] = <span class="literal">true</span>;</span><br><span class="line">S[c++] = x;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; G[x].size(); i++)</span><br><span class="line"><span class="keyword">if</span> (!dfs(G[x][i]))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_clause</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> xval, <span class="keyword">int</span> y, <span class="keyword">int</span> yval)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">1</span>) + xval;</span><br><span class="line">y = (y &lt;&lt; <span class="number">1</span>) + yval;</span><br><span class="line">G[x ^ <span class="number">1</span>].push_back(y);</span><br><span class="line">G[y ^ <span class="number">1</span>].push_back(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (n &lt;&lt; <span class="number">1</span>); i += <span class="number">2</span>)</span><br><span class="line"><span class="keyword">if</span> (!mark[i] &amp;&amp; !mark[i + <span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> (c = <span class="number">0</span>; !dfs(i))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (c &gt; <span class="number">0</span>)</span><br><span class="line">mark[S[--c]] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (!dfs(i + <span class="number">1</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;n = n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (n &lt;&lt; <span class="number">1</span>); i++)</span><br><span class="line">G[i].clear();</span><br><span class="line"><span class="built_in">memset</span>(mark, <span class="number">0</span>, <span class="keyword">sizeof</span>(mark));</span><br><span class="line">&#125;</span><br><span class="line">&#125; solver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T[maxn][<span class="number">2</span>], n;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> diff)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">solver.init(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; <span class="number">2</span>; a++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt; <span class="number">2</span>; b++)</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>(T[i][a] - T[j][b]) &lt; diff)</span><br><span class="line">solver.add_clause(i, a ^ <span class="number">1</span>, j, b ^ <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> solver.solve();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> L = <span class="number">0</span>, R = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; <span class="number">2</span>; a++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T[i][a]), R = max(R, T[i][a]);</span><br><span class="line"><span class="keyword">while</span> (L &lt; R)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> M = L + ((R - L + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (check(M))</span><br><span class="line">L = M;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">R = M - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, L);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> UVa </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
